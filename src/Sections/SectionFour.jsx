import "./SectionFour.style.scss";

import { doc, getDoc } from "firebase/firestore";

import CARD_IMAGES from "../assets/s4/data/CARD_IMAGES";
import SingleCard from "../components/s4components/SingleCard";
import Scoreboard from "../components/s4components/Scoreboard";
import LoginForm from "../components/s4components/LoginForm";
import SignupForm from "../components/s4components/SignupForm";

import { useAuthContext } from "../hooks/useAuthContext";
import { useLogout } from "../hooks/useLogout";
import { useUpdateScore } from "../hooks/useUpdateScore";
import { db } from "../firebase/configFirebase";

import { useEffect, useState } from "react";

import { useInView } from "react-intersection-observer";

// THIS CODE IS INSPIRED BY SHAUN PELLING (THE NET NINJA) UDEMY COURSE
const SectionFour = () => {
  const { ref, inView } = useInView({
    threshold: 0.3,
    triggerOnce: true,
  });

  const [cards, setCards] = useState([]);
  const [currentScore, setCurrentScore] = useState(0);
  const [choiceOne, setChoiceOne] = useState(null);
  const [choiceTwo, setChoiceTwo] = useState(null);
  const [disabled, setDisabled] = useState(false);
  const [isLoginFormOn, setIsLoginFormOn] = useState(false);
  const [isSignupFormOn, setIsSignupFormOn] = useState(false);
  const [isScoreImported, setIsScoreImported] = useState(false);

  const { logout } = useLogout();
  const { updateScore } = useUpdateScore();
  const { user } = useAuthContext();

  useEffect(() => {
    if (user) {
      getDbScore();
    }
  }, [user]);

  // update score on Db when score changes
  useEffect(() => {
    if (user && isScoreImported) {
      updateScore(currentScore, user.displayName);
    }
  }, [currentScore]);

  // get score from database when user logs in and update current score
  const getDbScore = async () => {
    const userRef = doc(db, "players", user.displayName);
    const userData = await getDoc(userRef);

    if (userData.exists()) {
      if (currentScore > userData.data().score) {
        updateScore(currentScore, user.displayName);
      } else {
        setCurrentScore(userData.data().score);
      }
      setIsScoreImported(true);
    } else {
      console.log("No document found");
    }
  };

  // handle SignOut
  const handleLogout = () => {
    logout();
    setIsLoginFormOn(false);
    setIsSignupFormOn(false);
  };

  //shuffle cards
  const shuffleCards = () => {
    const shuffledCards = [...CARD_IMAGES, ...CARD_IMAGES] //multiply each card
      .sort(() => Math.random() - 0.5) // sort cards in random order
      .map((card) => ({ ...card, id: Math.random() })); // adding unique id

    setCards(shuffledCards);
  };

  // handle a choice
  const handleChoice = (card) => {
    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);
  };

  // compare 2 selected cards
  useEffect(() => {
    if (choiceOne && choiceTwo) {
      setDisabled(true);
      if (choiceOne.img === choiceTwo.img) {
        setTimeout(() => {
          setCurrentScore((prevScore) => {
            return prevScore + 10;
          });
        }, 1000);

        setCards((prevCards) => {
          return prevCards.map((card) => {
            if (card.img === choiceOne.img) {
              return { ...card, matched: true };
            } else {
              return card;
            }
          });
        });
        resetTurn();
      } else {
        setTimeout(() => {
          resetTurn();
          setCurrentScore((prevScore) => {
            return prevScore - 1;
          });
        }, 1000);
      }
    }
  }, [choiceOne, choiceTwo]);

  // reset choices & increase turn
  const resetTurn = () => {
    setChoiceOne(null);
    setChoiceTwo(null);
    setDisabled(false);
  };

  useEffect(() => {
    shuffleCards();
  }, []);

  return (
    <div className="container s4" ref={ref} id="play">
      {isLoginFormOn && !user ? (
        <LoginForm
          setIsLoginFormOn={setIsLoginFormOn}
          setCurrentScore={setCurrentScore}
        />
      ) : (
        ""
      )}
      {isSignupFormOn && !user ? (
        <SignupForm setIsSignupFormOn={setIsSignupFormOn} />
      ) : (
        ""
      )}
      <div className="s4-svg">
        <svg
          // width="719.6810302734375"
          // height="57.60100173950195"
          viewBox="0 0 730 60"
          xmlns="http://www.w3.org/2000/svg"
        >
          <g
            strokeLinecap="round"
            fillRule="evenodd"
            fontSize="9pt"
            stroke="#F6AE2D"
            strokeWidth="0.8mm"
            style={{ strokeWidth: "0.5mm" }}
          >
            <path
              d="M 227.361 36.16 L 227.361 41.2 L 259.281 41.2 Q 260.161 41.2 260.801 41.84 A 2.169 2.169 0 0 1 261.307 42.606 A 2.107 2.107 0 0 1 261.441 43.36 L 261.441 54.64 Q 261.441 55.52 260.801 56.16 A 2.169 2.169 0 0 1 260.035 56.667 A 2.107 2.107 0 0 1 259.281 56.8 L 208.721 56.8 Q 207.841 56.8 207.201 56.16 A 2.169 2.169 0 0 1 206.694 55.394 A 2.107 2.107 0 0 1 206.561 54.64 L 206.561 2.96 Q 206.561 2.08 207.201 1.44 A 2.169 2.169 0 0 1 207.966 0.934 A 2.107 2.107 0 0 1 208.721 0.8 L 258.481 0.8 Q 259.361 0.8 260.001 1.44 A 2.169 2.169 0 0 1 260.507 2.206 A 2.107 2.107 0 0 1 260.641 2.96 L 260.641 14.24 Q 260.641 15.12 260.001 15.76 A 2.169 2.169 0 0 1 259.235 16.267 A 2.107 2.107 0 0 1 258.481 16.4 L 227.361 16.4 L 227.361 21.44 L 254.081 21.44 Q 254.961 21.44 255.601 22.08 A 2.169 2.169 0 0 1 256.107 22.846 A 2.107 2.107 0 0 1 256.241 23.6 L 256.241 34 Q 256.241 34.88 255.601 35.52 A 2.169 2.169 0 0 1 254.835 36.027 A 2.107 2.107 0 0 1 254.081 36.16 L 227.361 36.16 Z M 295.361 36.16 L 295.361 41.2 L 327.281 41.2 Q 328.161 41.2 328.801 41.84 A 2.169 2.169 0 0 1 329.307 42.606 A 2.107 2.107 0 0 1 329.441 43.36 L 329.441 54.64 Q 329.441 55.52 328.801 56.16 A 2.169 2.169 0 0 1 328.035 56.667 A 2.107 2.107 0 0 1 327.281 56.8 L 276.721 56.8 Q 275.841 56.8 275.201 56.16 A 2.169 2.169 0 0 1 274.694 55.394 A 2.107 2.107 0 0 1 274.561 54.64 L 274.561 2.96 Q 274.561 2.08 275.201 1.44 A 2.169 2.169 0 0 1 275.966 0.934 A 2.107 2.107 0 0 1 276.721 0.8 L 326.481 0.8 Q 327.361 0.8 328.001 1.44 A 2.169 2.169 0 0 1 328.507 2.206 A 2.107 2.107 0 0 1 328.641 2.96 L 328.641 14.24 Q 328.641 15.12 328.001 15.76 A 2.169 2.169 0 0 1 327.235 16.267 A 2.107 2.107 0 0 1 326.481 16.4 L 295.361 16.4 L 295.361 21.44 L 322.081 21.44 Q 322.961 21.44 323.601 22.08 A 2.169 2.169 0 0 1 324.107 22.846 A 2.107 2.107 0 0 1 324.241 23.6 L 324.241 34 Q 324.241 34.88 323.601 35.52 A 2.169 2.169 0 0 1 322.835 36.027 A 2.107 2.107 0 0 1 322.081 36.16 L 295.361 36.16 Z M 635.361 36.16 L 635.361 41.2 L 667.281 41.2 Q 668.161 41.2 668.801 41.84 A 2.169 2.169 0 0 1 669.307 42.606 A 2.107 2.107 0 0 1 669.441 43.36 L 669.441 54.64 Q 669.441 55.52 668.801 56.16 A 2.169 2.169 0 0 1 668.035 56.667 A 2.107 2.107 0 0 1 667.281 56.8 L 616.721 56.8 Q 615.841 56.8 615.201 56.16 A 2.169 2.169 0 0 1 614.694 55.394 A 2.107 2.107 0 0 1 614.561 54.64 L 614.561 2.96 Q 614.561 2.08 615.201 1.44 A 2.169 2.169 0 0 1 615.966 0.934 A 2.107 2.107 0 0 1 616.721 0.8 L 666.481 0.8 Q 667.361 0.8 668.001 1.44 A 2.169 2.169 0 0 1 668.507 2.206 A 2.107 2.107 0 0 1 668.641 2.96 L 668.641 14.24 Q 668.641 15.12 668.001 15.76 A 2.169 2.169 0 0 1 667.235 16.267 A 2.107 2.107 0 0 1 666.481 16.4 L 635.361 16.4 L 635.361 21.44 L 662.081 21.44 Q 662.961 21.44 663.601 22.08 A 2.169 2.169 0 0 1 664.107 22.846 A 2.107 2.107 0 0 1 664.241 23.6 L 664.241 34 Q 664.241 34.88 663.601 35.52 A 2.169 2.169 0 0 1 662.835 36.027 A 2.107 2.107 0 0 1 662.081 36.16 L 635.361 36.16 Z M 179.281 0.8 L 193.921 0.8 Q 194.801 0.8 195.441 1.44 A 2.169 2.169 0 0 1 195.947 2.206 A 2.107 2.107 0 0 1 196.081 2.96 L 196.081 54.64 Q 196.081 55.52 195.441 56.16 A 2.169 2.169 0 0 1 194.675 56.667 A 2.107 2.107 0 0 1 193.921 56.8 L 179.441 56.8 Q 178.561 56.8 177.921 56.16 A 2.169 2.169 0 0 1 177.414 55.394 A 2.107 2.107 0 0 1 177.281 54.64 L 177.281 29.84 L 171.441 41.36 Q 170.961 42.32 170.001 42.84 A 4.437 4.437 0 0 1 168.988 43.244 A 3.646 3.646 0 0 1 168.081 43.36 L 162.641 43.36 A 4.212 4.212 0 0 1 161.624 43.244 A 3.073 3.073 0 0 1 160.401 42.64 A 7.319 7.319 0 0 1 159.959 42.251 Q 159.454 41.764 159.281 41.36 L 153.441 29.84 L 153.441 54.64 Q 153.441 55.52 152.801 56.16 A 2.169 2.169 0 0 1 152.035 56.667 A 2.107 2.107 0 0 1 151.281 56.8 L 136.801 56.8 Q 135.921 56.8 135.281 56.16 A 2.169 2.169 0 0 1 134.774 55.394 A 2.107 2.107 0 0 1 134.641 54.64 L 134.641 2.96 Q 134.641 2.08 135.281 1.44 A 2.169 2.169 0 0 1 136.046 0.934 A 2.107 2.107 0 0 1 136.801 0.8 L 151.441 0.8 A 3.584 3.584 0 0 1 154.317 2.132 A 5.249 5.249 0 0 1 154.881 2.96 L 165.361 22.16 L 175.841 2.96 A 4.863 4.863 0 0 1 176.716 1.798 A 3.566 3.566 0 0 1 179.281 0.8 Z M 587.281 0.8 L 601.921 0.8 Q 602.801 0.8 603.441 1.44 A 2.169 2.169 0 0 1 603.947 2.206 A 2.107 2.107 0 0 1 604.081 2.96 L 604.081 54.64 Q 604.081 55.52 603.441 56.16 A 2.169 2.169 0 0 1 602.675 56.667 A 2.107 2.107 0 0 1 601.921 56.8 L 587.441 56.8 Q 586.561 56.8 585.921 56.16 A 2.169 2.169 0 0 1 585.414 55.394 A 2.107 2.107 0 0 1 585.281 54.64 L 585.281 29.84 L 579.441 41.36 Q 578.961 42.32 578.001 42.84 A 4.437 4.437 0 0 1 576.988 43.244 A 3.646 3.646 0 0 1 576.081 43.36 L 570.641 43.36 A 4.212 4.212 0 0 1 569.624 43.244 A 3.073 3.073 0 0 1 568.401 42.64 A 7.319 7.319 0 0 1 567.959 42.251 Q 567.454 41.764 567.281 41.36 L 561.441 29.84 L 561.441 54.64 Q 561.441 55.52 560.801 56.16 A 2.169 2.169 0 0 1 560.035 56.667 A 2.107 2.107 0 0 1 559.281 56.8 L 544.801 56.8 Q 543.921 56.8 543.281 56.16 A 2.169 2.169 0 0 1 542.774 55.394 A 2.107 2.107 0 0 1 542.641 54.64 L 542.641 2.96 Q 542.641 2.08 543.281 1.44 A 2.169 2.169 0 0 1 544.046 0.934 A 2.107 2.107 0 0 1 544.801 0.8 L 559.441 0.8 A 3.584 3.584 0 0 1 562.317 2.132 A 5.249 5.249 0 0 1 562.881 2.96 L 573.361 22.16 L 583.841 2.96 A 4.863 4.863 0 0 1 584.716 1.798 A 3.566 3.566 0 0 1 587.281 0.8 Z M 34.961 23.04 L 58.161 23.04 Q 59.041 23.04 59.681 23.68 A 2.169 2.169 0 0 1 60.187 24.446 A 2.107 2.107 0 0 1 60.321 25.2 L 60.321 33.68 A 28.154 28.154 0 0 1 59.45 40.905 A 18.72 18.72 0 0 1 52.041 51.72 Q 43.761 57.6 30.161 57.6 A 51.242 51.242 0 0 1 21.164 56.857 Q 16.212 55.973 12.211 54.037 A 27.341 27.341 0 0 1 8.281 51.72 A 18.975 18.975 0 0 1 0.585 39.611 A 30 30 0 0 1 0.001 33.52 L 0.001 24.08 Q 0.001 17.92 2.361 13.2 Q 4.721 8.48 8.961 5.6 A 31.356 31.356 0 0 1 19.34 1.17 Q 23.58 0.165 28.524 0.023 A 57.267 57.267 0 0 1 30.161 0 A 48.21 48.21 0 0 1 37.019 0.469 A 38.629 38.629 0 0 1 41.881 1.48 A 39.555 39.555 0 0 1 45.496 2.664 Q 48.361 3.768 50.361 5.16 A 31.752 31.752 0 0 1 53.951 8.051 A 26.417 26.417 0 0 1 55.761 9.92 A 24.853 24.853 0 0 1 57.567 12.227 Q 59.359 14.844 59.632 17.058 A 6.392 6.392 0 0 1 59.681 17.84 A 1.69 1.69 0 0 1 59.177 19.064 A 2.111 2.111 0 0 1 59.161 19.08 Q 58.641 19.6 57.921 19.6 L 39.841 19.6 A 4.592 4.592 0 0 1 38.989 19.527 Q 38.033 19.346 37.521 18.72 Q 35.041 15.6 30.761 15.6 A 17.64 17.64 0 0 0 28.15 15.781 Q 26.799 15.984 25.697 16.413 A 8.075 8.075 0 0 0 24.041 17.28 Q 21.601 18.96 21.601 21.6 L 21.601 35.2 Q 21.601 38.4 24.001 40.2 A 8.085 8.085 0 0 0 26.476 41.431 Q 27.592 41.778 28.939 41.913 A 18.207 18.207 0 0 0 30.761 42 A 17.8 17.8 0 0 0 33.29 41.832 Q 35.858 41.463 37.481 40.28 Q 39.384 38.893 39.804 37.115 A 4.463 4.463 0 0 0 39.921 36.24 L 34.961 36.24 Q 34.081 36.24 33.441 35.6 A 2.169 2.169 0 0 1 32.934 34.834 A 2.107 2.107 0 0 1 32.801 34.08 L 32.801 25.2 Q 32.801 24.32 33.441 23.68 A 2.169 2.169 0 0 1 34.206 23.174 A 2.107 2.107 0 0 1 34.961 23.04 Z M 530.721 17.2 L 516.241 17.2 L 516.241 40.4 L 530.721 40.4 Q 531.601 40.4 532.241 41.04 A 2.169 2.169 0 0 1 532.747 41.806 A 2.107 2.107 0 0 1 532.881 42.56 L 532.881 54.64 Q 532.881 55.52 532.241 56.16 A 2.169 2.169 0 0 1 531.475 56.667 A 2.107 2.107 0 0 1 530.721 56.8 L 480.001 56.8 Q 479.121 56.8 478.481 56.16 A 2.169 2.169 0 0 1 477.974 55.394 A 2.107 2.107 0 0 1 477.841 54.64 L 477.841 42.56 Q 477.841 41.68 478.481 41.04 A 2.169 2.169 0 0 1 479.246 40.534 A 2.107 2.107 0 0 1 480.001 40.4 L 494.641 40.4 L 494.641 17.2 L 480.001 17.2 Q 479.121 17.2 478.481 16.56 A 2.169 2.169 0 0 1 477.974 15.794 A 2.107 2.107 0 0 1 477.841 15.04 L 477.841 2.96 Q 477.841 2.08 478.481 1.44 A 2.169 2.169 0 0 1 479.246 0.934 A 2.107 2.107 0 0 1 480.001 0.8 L 530.721 0.8 Q 531.601 0.8 532.241 1.44 A 2.169 2.169 0 0 1 532.747 2.206 A 2.107 2.107 0 0 1 532.881 2.96 L 532.881 15.04 Q 532.881 15.92 532.241 16.56 A 2.169 2.169 0 0 1 531.475 17.067 A 2.107 2.107 0 0 1 530.721 17.2 Z M 409.761 0.8 L 464.961 0.8 Q 465.841 0.8 466.481 1.44 A 2.169 2.169 0 0 1 466.987 2.206 A 2.107 2.107 0 0 1 467.121 2.96 L 467.121 15.84 Q 467.121 16.72 466.481 17.36 A 2.169 2.169 0 0 1 465.715 17.867 A 2.107 2.107 0 0 1 464.961 18 L 447.761 18 L 447.761 54.64 Q 447.761 55.52 447.121 56.16 A 2.169 2.169 0 0 1 446.355 56.667 A 2.107 2.107 0 0 1 445.601 56.8 L 429.121 56.8 Q 428.241 56.8 427.601 56.16 A 2.169 2.169 0 0 1 427.094 55.394 A 2.107 2.107 0 0 1 426.961 54.64 L 426.961 18 L 409.761 18 Q 408.881 18 408.241 17.36 A 2.169 2.169 0 0 1 407.734 16.594 A 2.107 2.107 0 0 1 407.601 15.84 L 407.601 2.96 Q 407.601 2.08 408.241 1.44 A 2.169 2.169 0 0 1 409.006 0.934 A 2.107 2.107 0 0 1 409.761 0.8 Z M 82.241 56.8 L 67.121 56.8 A 1.69 1.69 0 0 1 65.897 56.296 A 2.111 2.111 0 0 1 65.881 56.28 A 2.535 2.535 0 0 1 65.629 55.991 Q 65.509 55.827 65.442 55.667 A 1.003 1.003 0 0 1 65.361 55.28 A 4.627 4.627 0 0 1 65.367 55.029 Q 65.383 54.733 65.441 54.56 L 82.881 3.44 A 4.038 4.038 0 0 1 83.488 2.12 Q 84.198 1.14 85.502 0.888 A 5.149 5.149 0 0 1 86.481 0.8 L 108.721 0.8 A 4.711 4.711 0 0 1 110.116 0.992 Q 111.605 1.453 112.187 3.021 A 4.936 4.936 0 0 1 112.321 3.44 L 129.761 54.56 A 1.19 1.19 0 0 1 129.801 54.724 Q 129.841 54.943 129.841 55.28 A 1.023 1.023 0 0 1 129.741 55.708 Q 129.613 55.988 129.321 56.28 Q 128.801 56.8 128.081 56.8 L 112.961 56.8 A 3.674 3.674 0 0 1 111.223 56.402 Q 110.422 55.98 109.87 55.112 A 5.737 5.737 0 0 1 109.361 54.08 L 107.361 48.48 L 87.841 48.48 L 85.841 54.08 A 5.415 5.415 0 0 1 85.158 55.364 Q 84.101 56.8 82.241 56.8 Z M 701.281 0.8 L 717.521 0.8 Q 718.401 0.8 719.041 1.44 Q 719.681 2.08 719.681 3.12 L 719.601 33.6 Q 719.601 34.4 718.961 35 Q 718.321 35.6 717.441 35.6 L 701.281 35.6 Q 700.321 35.6 699.721 35 Q 699.121 34.4 699.121 33.36 L 699.121 3.28 Q 699.121 2.16 699.721 1.48 A 1.961 1.961 0 0 1 701.155 0.803 A 2.613 2.613 0 0 1 701.281 0.8 Z M 701.281 38.96 L 717.441 38.96 Q 718.321 38.96 718.961 39.6 A 2.169 2.169 0 0 1 719.467 40.366 A 2.107 2.107 0 0 1 719.601 41.12 L 719.601 54.64 Q 719.601 55.52 718.961 56.16 A 2.169 2.169 0 0 1 718.195 56.667 A 2.107 2.107 0 0 1 717.441 56.8 L 701.281 56.8 Q 700.401 56.8 699.761 56.16 A 2.169 2.169 0 0 1 699.254 55.394 A 2.107 2.107 0 0 1 699.121 54.64 L 699.121 41.12 Q 699.121 40.24 699.761 39.6 A 2.169 2.169 0 0 1 700.526 39.094 A 2.107 2.107 0 0 1 701.281 38.96 Z M 91.921 32.88 L 103.281 32.88 L 97.601 16.24 L 91.921 32.88 Z"
              className={`svg-elem-1 ${inView ? "svg-active" : ""}`}
            ></path>
          </g>
        </svg>
      </div>
      <div className="game-box">
        <div className="scoreboard">
          <Scoreboard />
          <div className="log-sign-buttons">
            {!user && (
              <button
                onClick={() => {
                  setIsLoginFormOn(true);
                }}
              >
                Login
              </button>
            )}
            {!user && (
              <button
                onClick={() => {
                  setIsSignupFormOn(true);
                }}
              >
                Signup
              </button>
            )}
            {user && (
              <button
                onClick={() => {
                  handleLogout();
                }}
              >
                Logout
              </button>
            )}
          </div>
          <p>
            Playing as <span> {user ? user.displayName : "guest"}</span>
          </p>
        </div>
        <div className="game">
          <button onClick={shuffleCards}>Play again</button>
          <p>Your current score: {currentScore}</p>
          <div className="card-grid">
            {cards.map((card) => (
              <SingleCard
                card={card}
                key={card.id}
                handleChoice={handleChoice}
                flipped={
                  card === choiceOne || card === choiceTwo || card.matched
                }
                disabled={disabled}
              />
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default SectionFour;
